// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_matmul_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        B_offset,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_pp0_stage0 = 14'd128;
parameter    ap_ST_fsm_pp0_stage1 = 14'd256;
parameter    ap_ST_fsm_pp0_stage2 = 14'd512;
parameter    ap_ST_fsm_pp0_stage3 = 14'd1024;
parameter    ap_ST_fsm_pp0_stage4 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage5 = 14'd4096;
parameter    ap_ST_fsm_state19 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [6:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [6:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
input  [63:0] B_offset;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg B_ce0;
reg B_ce1;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [127:0] indvar_flatten_reg_203;
reg   [63:0] outrowidx_1_reg_214;
reg   [63:0] inneridx_1_reg_224;
reg   [63:0] j1_reg_234;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_253_p2;
reg   [63:0] tmp_reg_529;
wire   [14:0] a10_fu_269_p2;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_11_fu_279_p1;
reg   [8:0] tmp_11_reg_543;
wire   [0:0] exitcond2_fu_264_p2;
wire   [63:0] grp_fu_275_p2;
reg   [63:0] tmp_9_reg_548;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_8_fu_282_p1;
reg   [15:0] tmp_8_reg_553;
wire   [8:0] tmp_10_fu_285_p1;
reg   [8:0] tmp_10_reg_559;
wire   [63:0] tmp_15_fu_288_p2;
wire   [127:0] cast_fu_293_p1;
reg   [127:0] cast_reg_569;
wire   [63:0] indvars_iv_fu_296_p2;
reg   [63:0] indvars_iv_reg_574;
wire    ap_CS_fsm_state5;
wire   [63:0] k_1_fu_306_p2;
reg   [63:0] k_1_reg_582;
wire   [63:0] tmp_1_fu_326_p2;
reg   [63:0] tmp_1_reg_587;
wire   [0:0] exitcond1_fu_301_p2;
wire   [8:0] tmp_16_fu_332_p1;
reg   [8:0] tmp_16_reg_592;
wire   [63:0] inneridx_2_fu_336_p2;
reg   [63:0] inneridx_2_reg_597;
wire   [63:0] outrowidx_2_fu_341_p2;
reg   [63:0] outrowidx_2_reg_602;
wire    ap_CS_fsm_state6;
wire   [63:0] inner_k_outcols_2_fu_358_p2;
reg   [63:0] inner_k_outcols_2_reg_612;
wire    ap_CS_fsm_state7;
wire   [15:0] inner_k_outcols_2_ca_fu_363_p2;
reg   [15:0] inner_k_outcols_2_ca_reg_619;
wire   [63:0] inner_k_outcols_end_fu_368_p2;
reg   [63:0] inner_k_outcols_end_reg_624;
wire   [127:0] grp_fu_349_p2;
reg   [127:0] bound_reg_629;
wire   [0:0] exitcond_flatten_fu_373_p2;
reg   [0:0] exitcond_flatten_reg_634;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_634_pp0_iter1_reg;
wire   [127:0] indvar_flatten_next_fu_378_p2;
reg   [127:0] indvar_flatten_next_reg_638;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] j1_mid2_fu_389_p3;
reg   [63:0] j1_mid2_reg_643;
wire   [63:0] sum_cast_mid2_v_v_v_s_fu_401_p3;
reg   [63:0] sum_cast_mid2_v_v_v_s_reg_648;
wire   [8:0] sum_cast_mid2_v_fu_418_p2;
reg   [8:0] sum_cast_mid2_v_reg_653;
wire   [63:0] tmp_5_mid2_v_v_v_fu_428_p3;
reg   [63:0] tmp_5_mid2_v_v_v_reg_658;
wire   [15:0] tmp_5_mid2_v_fu_440_p2;
reg   [15:0] tmp_5_mid2_v_reg_663;
wire   [15:0] tmp_20_fu_445_p1;
reg   [15:0] tmp_20_reg_668;
wire   [8:0] sum3_fu_453_p2;
reg   [8:0] sum3_reg_673;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state9_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [14:0] C_addr_1_reg_688;
reg   [14:0] C_addr_1_reg_688_pp0_iter1_reg;
reg   [31:0] B_load_1_reg_693;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state10_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] B_load_reg_698;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] tmp_4_reg_703;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state13_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [63:0] j_1_fu_480_p2;
reg   [63:0] j_1_reg_708;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] indvars_iv_next7_fu_485_p2;
wire    ap_CS_fsm_state19;
wire   [63:0] indvars_iv_next9_fu_490_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state12_pp0_stage4_iter0;
wire    ap_block_state18_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
reg   [14:0] a_reg_114;
reg   [63:0] indvars_iv11_pn_reg_125;
reg   [63:0] indvars_iv8_reg_136;
reg   [63:0] indvars_iv6_reg_146;
reg   [63:0] inner_k_outcols_reg_156;
reg   [63:0] outrowidx_reg_168;
reg   [63:0] inneridx_reg_180;
reg   [63:0] k_reg_192;
reg   [127:0] ap_phi_mux_indvar_flatten_phi_fu_207_p4;
wire    ap_block_pp0_stage0;
reg   [63:0] ap_phi_mux_outrowidx_1_phi_fu_217_p4;
reg   [63:0] ap_phi_mux_inneridx_1_phi_fu_227_p4;
reg   [63:0] ap_phi_mux_j1_phi_fu_237_p4;
wire   [63:0] a_cast_fu_259_p1;
wire   [63:0] sum_cast_mid2_fu_458_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] sum3_cast_fu_466_p1;
wire   [63:0] sum2_cast_fu_475_p1;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_243_p2;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire  signed [63:0] tmp_8_fu_282_p0;
wire  signed [63:0] tmp_10_fu_285_p0;
wire  signed [63:0] tmp_15_fu_288_p0;
wire  signed [63:0] cast_fu_293_p0;
wire  signed [63:0] indvars_iv_fu_296_p1;
wire  signed [63:0] exitcond1_fu_301_p1;
wire   [0:0] tmp_s_fu_312_p2;
wire   [63:0] umax_fu_318_p3;
wire   [63:0] grp_fu_349_p0;
wire   [63:0] grp_fu_349_p1;
wire  signed [63:0] inner_k_outcols_2_fu_358_p0;
wire   [15:0] tmp_17_fu_354_p1;
wire  signed [63:0] inner_k_outcols_end_fu_368_p0;
wire   [0:0] tmp_2_fu_384_p2;
wire  signed [63:0] tmp_3_fu_396_p0;
wire   [63:0] tmp_3_fu_396_p2;
wire   [8:0] tmp_18_fu_409_p1;
wire   [8:0] sum_cast_mid2_v_v_fu_413_p2;
wire  signed [63:0] tmp_5_fu_423_p0;
wire   [63:0] tmp_5_fu_423_p2;
wire   [15:0] tmp_19_fu_436_p1;
wire   [8:0] tmp_21_fu_449_p1;
wire   [15:0] tmp_5_mid2_fu_462_p2;
wire   [15:0] sum2_fu_470_p2;
wire  signed [63:0] indvars_iv_next7_fu_485_p1;
wire  signed [63:0] indvars_iv_next9_fu_490_p1;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state11_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] grp_fu_349_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

WebModel_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WebModel_fadd_32ncud_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_q0),
    .din1(tmp_4_reg_703),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

WebModel_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
WebModel_fmul_32ndEe_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_1_reg_693),
    .din1(B_load_reg_698),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

WebModel_mul_64s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
WebModel_mul_64s_bkb_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_253_p2)
);

WebModel_mul_64s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
WebModel_mul_64s_bkb_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outrows),
    .din1(innerdim),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

WebModel_mul_64nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
WebModel_mul_64nseOg_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_reg_114 <= a10_fu_269_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_reg_114 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_634 == 1'd0))) begin
        indvar_flatten_reg_203 <= indvar_flatten_next_reg_638;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_203 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvars_iv11_pn_reg_125 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        indvars_iv11_pn_reg_125 <= indvars_iv_reg_574;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvars_iv6_reg_146 <= outcols;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        indvars_iv6_reg_146 <= indvars_iv_next7_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvars_iv8_reg_136 <= tmp_15_fu_288_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        indvars_iv8_reg_136 <= indvars_iv_next9_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inner_k_outcols_reg_156 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        inner_k_outcols_reg_156 <= inner_k_outcols_2_reg_612;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_634 == 1'd0))) begin
        inneridx_1_reg_224 <= sum_cast_mid2_v_v_v_s_reg_648;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        inneridx_1_reg_224 <= inneridx_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inneridx_reg_180 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        inneridx_reg_180 <= inneridx_2_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_634 == 1'd0))) begin
        j1_reg_234 <= j_1_reg_708;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j1_reg_234 <= inner_k_outcols_2_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_192 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        k_reg_192 <= k_1_reg_582;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_634 == 1'd0))) begin
        outrowidx_1_reg_214 <= tmp_5_mid2_v_v_v_reg_658;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        outrowidx_1_reg_214 <= outrowidx_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outrowidx_reg_168 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outrowidx_reg_168 <= outrowidx_2_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_634 == 1'd0))) begin
        B_load_1_reg_693 <= B_q0;
        B_load_reg_698 <= B_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_634 == 1'd0))) begin
        C_addr_1_reg_688 <= sum2_cast_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        C_addr_1_reg_688_pp0_iter1_reg <= C_addr_1_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bound_reg_629 <= grp_fu_349_p2;
        inner_k_outcols_2_ca_reg_619 <= inner_k_outcols_2_ca_fu_363_p2;
        inner_k_outcols_2_reg_612 <= inner_k_outcols_2_fu_358_p2;
        inner_k_outcols_end_reg_624 <= inner_k_outcols_end_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cast_reg_569[63 : 0] <= cast_fu_293_p1[63 : 0];
        tmp_10_reg_559 <= tmp_10_fu_285_p1;
        tmp_8_reg_553 <= tmp_8_fu_282_p1;
        tmp_9_reg_548 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_634 <= exitcond_flatten_fu_373_p2;
        exitcond_flatten_reg_634_pp0_iter1_reg <= exitcond_flatten_reg_634;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_638 <= indvar_flatten_next_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv_reg_574 <= indvars_iv_fu_296_p2;
        k_1_reg_582 <= k_1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_301_p2 == 1'd0))) begin
        inneridx_2_reg_597 <= inneridx_2_fu_336_p2;
        outrowidx_2_reg_602 <= outrowidx_2_fu_341_p2;
        tmp_16_reg_592 <= tmp_16_fu_332_p1;
        tmp_1_reg_587 <= tmp_1_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_373_p2 == 1'd0))) begin
        j1_mid2_reg_643 <= j1_mid2_fu_389_p3;
        sum3_reg_673 <= sum3_fu_453_p2;
        sum_cast_mid2_v_reg_653 <= sum_cast_mid2_v_fu_418_p2;
        tmp_20_reg_668 <= tmp_20_fu_445_p1;
        tmp_5_mid2_v_reg_663 <= tmp_5_mid2_v_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_634 == 1'd0))) begin
        j_1_reg_708 <= j_1_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_373_p2 == 1'd0))) begin
        sum_cast_mid2_v_v_v_s_reg_648 <= sum_cast_mid2_v_v_v_s_fu_401_p3;
        tmp_5_mid2_v_v_v_reg_658 <= tmp_5_mid2_v_v_v_fu_428_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_11_reg_543 <= tmp_11_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_634 == 1'd0))) begin
        tmp_4_reg_703 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_529 <= grp_fu_253_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        C_address0 = C_addr_1_reg_688_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        C_address0 = C_addr_1_reg_688;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = a_cast_fu_259_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        C_d0 = grp_fu_243_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_634_pp0_iter1_reg == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_373_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond1_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_634 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_207_p4 = indvar_flatten_next_reg_638;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_207_p4 = indvar_flatten_reg_203;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_634 == 1'd0))) begin
        ap_phi_mux_inneridx_1_phi_fu_227_p4 = sum_cast_mid2_v_v_v_s_reg_648;
    end else begin
        ap_phi_mux_inneridx_1_phi_fu_227_p4 = inneridx_1_reg_224;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_634 == 1'd0))) begin
        ap_phi_mux_j1_phi_fu_237_p4 = j_1_reg_708;
    end else begin
        ap_phi_mux_j1_phi_fu_237_p4 = j1_reg_234;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_634 == 1'd0))) begin
        ap_phi_mux_outrowidx_1_phi_fu_217_p4 = tmp_5_mid2_v_v_v_reg_658;
    end else begin
        ap_phi_mux_outrowidx_1_phi_fu_217_p4 = outrowidx_1_reg_214;
    end
end

always @ (*) begin
    if (((exitcond1_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = sum_cast_mid2_fu_458_p1;

assign B_address1 = sum3_cast_fu_466_p1;

assign a10_fu_269_p2 = (a_reg_114 + 15'd1);

assign a_cast_fu_259_p1 = a_reg_114;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cast_fu_293_p0 = outrows;

assign cast_fu_293_p1 = $unsigned(cast_fu_293_p0);

assign exitcond1_fu_301_p1 = innerdim;

assign exitcond1_fu_301_p2 = ((k_reg_192 == exitcond1_fu_301_p1) ? 1'b1 : 1'b0);

assign exitcond2_fu_264_p2 = ((a_cast_fu_259_p1 == tmp_reg_529) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_373_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_207_p4 == bound_reg_629) ? 1'b1 : 1'b0);

assign grp_fu_349_p0 = grp_fu_349_p00;

assign grp_fu_349_p00 = tmp_1_reg_587;

assign grp_fu_349_p1 = cast_reg_569;

assign indvar_flatten_next_fu_378_p2 = (ap_phi_mux_indvar_flatten_phi_fu_207_p4 + 128'd1);

assign indvars_iv_fu_296_p1 = outcols;

assign indvars_iv_fu_296_p2 = ($signed(indvars_iv11_pn_reg_125) - $signed(indvars_iv_fu_296_p1));

assign indvars_iv_next7_fu_485_p1 = outcols;

assign indvars_iv_next7_fu_485_p2 = ($signed(indvars_iv6_reg_146) + $signed(indvars_iv_next7_fu_485_p1));

assign indvars_iv_next9_fu_490_p1 = outcols;

assign indvars_iv_next9_fu_490_p2 = ($signed(indvars_iv8_reg_136) + $signed(indvars_iv_next9_fu_490_p1));

assign inner_k_outcols_2_ca_fu_363_p2 = (tmp_17_fu_354_p1 + tmp_8_reg_553);

assign inner_k_outcols_2_fu_358_p0 = outcols;

assign inner_k_outcols_2_fu_358_p2 = ($signed(inner_k_outcols_2_fu_358_p0) + $signed(inner_k_outcols_reg_156));

assign inner_k_outcols_end_fu_368_p0 = outcols;

assign inner_k_outcols_end_fu_368_p2 = ($signed(inner_k_outcols_end_fu_368_p0) + $signed(inner_k_outcols_2_fu_358_p2));

assign inneridx_2_fu_336_p2 = (inneridx_reg_180 + tmp_9_reg_548);

assign j1_mid2_fu_389_p3 = ((tmp_2_fu_384_p2[0:0] === 1'b1) ? ap_phi_mux_j1_phi_fu_237_p4 : inner_k_outcols_2_reg_612);

assign j_1_fu_480_p2 = (64'd1 + j1_mid2_reg_643);

assign k_1_fu_306_p2 = (k_reg_192 + 64'd1);

assign outrowidx_2_fu_341_p2 = (outrowidx_reg_168 + tmp_reg_529);

assign sum2_cast_fu_475_p1 = sum2_fu_470_p2;

assign sum2_fu_470_p2 = (tmp_5_mid2_fu_462_p2 + tmp_20_reg_668);

assign sum3_cast_fu_466_p1 = sum3_reg_673;

assign sum3_fu_453_p2 = (tmp_21_fu_449_p1 + tmp_11_reg_543);

assign sum_cast_mid2_fu_458_p1 = sum_cast_mid2_v_reg_653;

assign sum_cast_mid2_v_fu_418_p2 = (tmp_16_reg_592 + sum_cast_mid2_v_v_fu_413_p2);

assign sum_cast_mid2_v_v_fu_413_p2 = (tmp_18_fu_409_p1 + tmp_10_reg_559);

assign sum_cast_mid2_v_v_v_s_fu_401_p3 = ((tmp_2_fu_384_p2[0:0] === 1'b1) ? ap_phi_mux_inneridx_1_phi_fu_227_p4 : tmp_3_fu_396_p2);

assign tmp_10_fu_285_p0 = innerdim;

assign tmp_10_fu_285_p1 = tmp_10_fu_285_p0[8:0];

assign tmp_11_fu_279_p1 = B_offset[8:0];

assign tmp_15_fu_288_p0 = outcols;

assign tmp_15_fu_288_p2 = tmp_15_fu_288_p0 << 64'd1;

assign tmp_16_fu_332_p1 = k_reg_192[8:0];

assign tmp_17_fu_354_p1 = inner_k_outcols_reg_156[15:0];

assign tmp_18_fu_409_p1 = sum_cast_mid2_v_v_v_s_fu_401_p3[8:0];

assign tmp_19_fu_436_p1 = tmp_5_mid2_v_v_v_fu_428_p3[15:0];

assign tmp_1_fu_326_p2 = (indvars_iv_fu_296_p2 + umax_fu_318_p3);

assign tmp_20_fu_445_p1 = j1_mid2_fu_389_p3[15:0];

assign tmp_21_fu_449_p1 = j1_mid2_fu_389_p3[8:0];

assign tmp_2_fu_384_p2 = ((ap_phi_mux_j1_phi_fu_237_p4 < inner_k_outcols_end_reg_624) ? 1'b1 : 1'b0);

assign tmp_3_fu_396_p0 = innerdim;

assign tmp_3_fu_396_p2 = ($signed(tmp_3_fu_396_p0) + $signed(ap_phi_mux_inneridx_1_phi_fu_227_p4));

assign tmp_5_fu_423_p0 = outcols;

assign tmp_5_fu_423_p2 = ($signed(tmp_5_fu_423_p0) + $signed(ap_phi_mux_outrowidx_1_phi_fu_217_p4));

assign tmp_5_mid2_fu_462_p2 = (tmp_5_mid2_v_reg_663 - inner_k_outcols_2_ca_reg_619);

assign tmp_5_mid2_v_fu_440_p2 = (tmp_19_fu_436_p1 + tmp_8_reg_553);

assign tmp_5_mid2_v_v_v_fu_428_p3 = ((tmp_2_fu_384_p2[0:0] === 1'b1) ? ap_phi_mux_outrowidx_1_phi_fu_217_p4 : tmp_5_fu_423_p2);

assign tmp_8_fu_282_p0 = outcols;

assign tmp_8_fu_282_p1 = tmp_8_fu_282_p0[15:0];

assign tmp_s_fu_312_p2 = ((indvars_iv6_reg_146 > indvars_iv8_reg_136) ? 1'b1 : 1'b0);

assign umax_fu_318_p3 = ((tmp_s_fu_312_p2[0:0] === 1'b1) ? indvars_iv6_reg_146 : indvars_iv8_reg_136);

always @ (posedge ap_clk) begin
    cast_reg_569[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //k2c_matmul_2
