// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _k2c_sub2idx_HH_
#define _k2c_sub2idx_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "WebModel_mul_64s_bkb.h"

namespace ap_rtl {

struct k2c_sub2idx : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > sub_address0;
    sc_out< sc_logic > sub_ce0;
    sc_in< sc_lv<64> > sub_q0;
    sc_out< sc_lv<3> > shape_address0;
    sc_out< sc_logic > shape_ce0;
    sc_in< sc_lv<64> > shape_q0;
    sc_in< sc_lv<64> > ndim;
    sc_out< sc_lv<64> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    k2c_sub2idx(sc_module_name name);
    SC_HAS_PROCESS(k2c_sub2idx);

    ~k2c_sub2idx();

    sc_trace_file* mVcdFile;

    WebModel_mul_64s_bkb<1,2,64,64,64>* WebModel_mul_64s_bkb_U1;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > temp1_reg_87;
    sc_signal< sc_lv<64> > j_0_in_reg_97;
    sc_signal< sc_lv<4> > tmp_2_fu_106_p1;
    sc_signal< sc_lv<4> > tmp_2_reg_158;
    sc_signal< sc_lv<3> > i_1_fu_119_p2;
    sc_signal< sc_lv<3> > i_1_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > i_cast1_fu_125_p1;
    sc_signal< sc_lv<64> > i_cast1_reg_171;
    sc_signal< sc_lv<1> > exitcond_fu_114_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > j_fu_130_p2;
    sc_signal< sc_lv<64> > j_reg_186;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_fu_137_p2;
    sc_signal< sc_lv<1> > tmp_reg_191;
    sc_signal< sc_lv<1> > tmp_reg_191_pp0_iter1_reg;
    sc_signal< sc_lv<64> > shape_load_reg_200;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<64> > grp_fu_142_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<64> > idx_1_fu_147_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<64> > idx_reg_64;
    sc_signal< sc_lv<3> > i_reg_76;
    sc_signal< sc_lv<64> > ap_phi_mux_j_0_in_phi_fu_100_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<4> > i_cast_fu_110_p1;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_pp0_stage1;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage1_iter0();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_block_state7_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_j_0_in_phi_fu_100_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_exitcond_fu_114_p2();
    void thread_i_1_fu_119_p2();
    void thread_i_cast1_fu_125_p1();
    void thread_i_cast_fu_110_p1();
    void thread_idx_1_fu_147_p2();
    void thread_j_fu_130_p2();
    void thread_shape_address0();
    void thread_shape_ce0();
    void thread_sub_address0();
    void thread_sub_ce0();
    void thread_tmp_2_fu_106_p1();
    void thread_tmp_fu_137_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
