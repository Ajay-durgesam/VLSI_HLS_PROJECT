// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "k2c_relu_func.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic k2c_relu_func::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic k2c_relu_func::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> k2c_relu_func::ap_ST_fsm_state1 = "1";
const sc_lv<3> k2c_relu_func::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> k2c_relu_func::ap_ST_fsm_state5 = "100";
const bool k2c_relu_func::ap_const_boolean_1 = true;
const sc_lv<32> k2c_relu_func::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> k2c_relu_func::ap_const_lv32_1 = "1";
const bool k2c_relu_func::ap_const_boolean_0 = false;
const sc_lv<1> k2c_relu_func::ap_const_lv1_0 = "0";
const sc_lv<1> k2c_relu_func::ap_const_lv1_1 = "1";
const sc_lv<64> k2c_relu_func::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> k2c_relu_func::ap_const_lv64_1 = "1";
const sc_lv<32> k2c_relu_func::ap_const_lv32_17 = "10111";
const sc_lv<32> k2c_relu_func::ap_const_lv32_1E = "11110";
const sc_lv<8> k2c_relu_func::ap_const_lv8_FF = "11111111";
const sc_lv<23> k2c_relu_func::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> k2c_relu_func::ap_const_lv5_5 = "101";
const sc_lv<32> k2c_relu_func::ap_const_lv32_2 = "10";

k2c_relu_func::k2c_relu_func(sc_module_name name) : sc_module(name), mVcdFile(0) {
    WebModel_fcmp_32nlbW_U46 = new WebModel_fcmp_32nlbW<1,1,32,32,1>("WebModel_fcmp_32nlbW_U46");
    WebModel_fcmp_32nlbW_U46->din0(x_q0);
    WebModel_fcmp_32nlbW_U46->din1(ap_var_for_const0);
    WebModel_fcmp_32nlbW_U46->opcode(ap_var_for_const1);
    WebModel_fcmp_32nlbW_U46->dout(tmp_4_fu_74_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_00001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_fu_80_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond_fu_80_p2);
    sensitive << ( size );
    sensitive << ( i_reg_62 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_2_fu_85_p2);
    sensitive << ( i_reg_62 );

    SC_METHOD(thread_notlhs_fu_109_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_fu_95_p4 );

    SC_METHOD(thread_notrhs_fu_115_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_6_fu_105_p1 );

    SC_METHOD(thread_tmp_2_fu_121_p2);
    sensitive << ( notlhs_reg_150 );
    sensitive << ( notrhs_reg_155 );

    SC_METHOD(thread_tmp_5_fu_125_p2);
    sensitive << ( tmp_4_reg_160 );
    sensitive << ( tmp_2_fu_121_p2 );

    SC_METHOD(thread_tmp_6_fu_105_p1);
    sensitive << ( x_load_to_int_fu_91_p1 );

    SC_METHOD(thread_tmp_fu_95_p4);
    sensitive << ( x_load_to_int_fu_91_p1 );

    SC_METHOD(thread_x_address0);
    sensitive << ( i_reg_62 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_x_address1);
    sensitive << ( x_addr_reg_144_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_x_ce1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_x_d1);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_x_load_to_int_fu_91_p1);
    sensitive << ( x_q0 );

    SC_METHOD(thread_x_we1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_5_fu_125_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_fu_80_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "k2c_relu_func_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, x_address1, "(port)x_address1");
    sc_trace(mVcdFile, x_ce1, "(port)x_ce1");
    sc_trace(mVcdFile, x_we1, "(port)x_we1");
    sc_trace(mVcdFile, x_d1, "(port)x_d1");
    sc_trace(mVcdFile, size, "(port)size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_reg_62, "i_reg_62");
    sc_trace(mVcdFile, exitcond_fu_80_p2, "exitcond_fu_80_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_2_fu_85_p2, "i_2_fu_85_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, x_addr_reg_144, "x_addr_reg_144");
    sc_trace(mVcdFile, x_addr_reg_144_pp0_iter1_reg, "x_addr_reg_144_pp0_iter1_reg");
    sc_trace(mVcdFile, notlhs_fu_109_p2, "notlhs_fu_109_p2");
    sc_trace(mVcdFile, notlhs_reg_150, "notlhs_reg_150");
    sc_trace(mVcdFile, notrhs_fu_115_p2, "notrhs_fu_115_p2");
    sc_trace(mVcdFile, notrhs_reg_155, "notrhs_reg_155");
    sc_trace(mVcdFile, tmp_4_fu_74_p2, "tmp_4_fu_74_p2");
    sc_trace(mVcdFile, tmp_4_reg_160, "tmp_4_reg_160");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_5_fu_125_p2, "tmp_5_fu_125_p2");
    sc_trace(mVcdFile, x_load_to_int_fu_91_p1, "x_load_to_int_fu_91_p1");
    sc_trace(mVcdFile, tmp_fu_95_p4, "tmp_fu_95_p4");
    sc_trace(mVcdFile, tmp_6_fu_105_p1, "tmp_6_fu_105_p1");
    sc_trace(mVcdFile, tmp_2_fu_121_p2, "tmp_2_fu_121_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_00001, "ap_block_pp0_stage0_00001");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

k2c_relu_func::~k2c_relu_func() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete WebModel_fcmp_32nlbW_U46;
}

void k2c_relu_func::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void k2c_relu_func::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_5;
}

void k2c_relu_func::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_fu_80_p2.read(), ap_const_lv1_0))) {
        i_reg_62 = i_2_fu_85_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_62 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        notlhs_reg_150 = notlhs_fu_109_p2.read();
        notrhs_reg_155 = notrhs_fu_115_p2.read();
        tmp_4_reg_160 = tmp_4_fu_74_p2.read();
        x_addr_reg_144_pp0_iter1_reg = x_addr_reg_144.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_80_p2.read(), ap_const_lv1_0))) {
        x_addr_reg_144 =  (sc_lv<15>) (i_reg_62.read());
    }
}

void k2c_relu_func::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void k2c_relu_func::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void k2c_relu_func::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void k2c_relu_func::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_pp0_stage0_00001() {
    ap_block_pp0_stage0_00001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void k2c_relu_func::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_fu_80_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void k2c_relu_func::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_exitcond_fu_80_p2() {
    exitcond_fu_80_p2 = (!i_reg_62.read().is_01() || !size.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_62.read() == size.read());
}

void k2c_relu_func::thread_i_2_fu_85_p2() {
    i_2_fu_85_p2 = (!i_reg_62.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(i_reg_62.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void k2c_relu_func::thread_notlhs_fu_109_p2() {
    notlhs_fu_109_p2 = (!tmp_fu_95_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_95_p4.read() != ap_const_lv8_FF);
}

void k2c_relu_func::thread_notrhs_fu_115_p2() {
    notrhs_fu_115_p2 = (!tmp_6_fu_105_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_105_p1.read() == ap_const_lv23_0);
}

void k2c_relu_func::thread_tmp_2_fu_121_p2() {
    tmp_2_fu_121_p2 = (notrhs_reg_155.read() | notlhs_reg_150.read());
}

void k2c_relu_func::thread_tmp_5_fu_125_p2() {
    tmp_5_fu_125_p2 = (tmp_2_fu_121_p2.read() & tmp_4_reg_160.read());
}

void k2c_relu_func::thread_tmp_6_fu_105_p1() {
    tmp_6_fu_105_p1 = x_load_to_int_fu_91_p1.read().range(23-1, 0);
}

void k2c_relu_func::thread_tmp_fu_95_p4() {
    tmp_fu_95_p4 = x_load_to_int_fu_91_p1.read().range(30, 23);
}

void k2c_relu_func::thread_x_address0() {
    x_address0 =  (sc_lv<15>) (i_reg_62.read());
}

void k2c_relu_func::thread_x_address1() {
    x_address1 = x_addr_reg_144_pp0_iter1_reg.read();
}

void k2c_relu_func::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_x_ce1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1))) {
        x_ce1 = ap_const_logic_1;
    } else {
        x_ce1 = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_x_d1() {
    x_d1 = ap_const_lv32_0;
}

void k2c_relu_func::thread_x_load_to_int_fu_91_p1() {
    x_load_to_int_fu_91_p1 = x_q0.read();
}

void k2c_relu_func::thread_x_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_125_p2.read()))) {
        x_we1 = ap_const_logic_1;
    } else {
        x_we1 = ap_const_logic_0;
    }
}

void k2c_relu_func::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(exitcond_fu_80_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(exitcond_fu_80_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

