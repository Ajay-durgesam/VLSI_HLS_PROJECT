-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_affine_matmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    d_ce0 : OUT STD_LOGIC;
    d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    outcols : IN STD_LOGIC_VECTOR (63 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_affine_matmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum1_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_fu_281_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_reg_493 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_70_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_reg_498 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_503 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_fu_310_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_reg_511 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid2_v_fu_327_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_mid2_v_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_336_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_71_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_mid2_fu_340_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_mid2_reg_537 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal outrowidx_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outrowidx_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal inneridx_fu_444_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inneridx_reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_557_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal next_mul_fu_376_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_74_reg_576 : STD_LOGIC_VECTOR (1 downto 0);
    signal A_load_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_31_fu_411_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state11_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_53_fu_434_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal p_reg_178 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_189 : STD_LOGIC_VECTOR (127 downto 0);
    signal j_reg_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_k_phi_fu_238_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_249_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex_cast_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal cast_fu_287_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast2_fu_290_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_299_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_s_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum7_fu_366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum7_fu_366_p2 : signal is "no";
    signal next_mul_fu_376_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex_fu_390_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_31_fu_411_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_fu_425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of sum4_fu_425_p2 : signal is "no";
    signal tmp_72_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_293_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_293_p10 : STD_LOGIC_VECTOR (127 downto 0);

    component WebModel_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_mul_64s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WebModel_mul_64nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component WebModel_mux_464_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_mul_mul_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    WebModel_fadd_32ncud_U50 : component WebModel_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum1_reg_223,
        din1 => tmp_11_reg_611,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    WebModel_fmul_32ndEe_U51 : component WebModel_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_601,
        din1 => tmp_31_reg_606,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    WebModel_mul_64s_bkb_U52 : component WebModel_mul_64s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols,
        din1 => outrows,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    WebModel_mul_64nseOg_U53 : component WebModel_mul_64nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    WebModel_mux_464_kbM_U54 : component WebModel_mux_464_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => B_0_q0,
        din1 => B_1_q0,
        din2 => B_2_q0,
        din3 => B_3_q0,
        din4 => tmp_31_fu_411_p5,
        dout => tmp_31_fu_411_p6);

    WebModel_mul_mul_mb6_U55 : component WebModel_mul_mul_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_72_fu_347_p1,
        din1 => tmp_69_reg_493,
        dout => outrowidx_fu_439_p2);

    WebModel_mul_mul_mb6_U56 : component WebModel_mul_mul_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_72_fu_347_p1,
        din1 => tmp_70_reg_498,
        dout => inneridx_fu_444_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_reg_211 <= i_53_fu_434_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_211 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten_reg_189 <= indvar_flatten_next_reg_511;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_189 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    j_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_200 <= j_cast_mid2_v_reg_521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_200 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    k_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_557 = ap_const_lv1_0))) then 
                k_reg_234 <= k_2_reg_561;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_reg_234 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_276_p2 = ap_const_lv1_0))) then 
                p_reg_178 <= p_1_fu_281_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_reg_178 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_557 = ap_const_lv1_0))) then 
                phi_mul_reg_245 <= next_mul_reg_571;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_245 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    sum1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_reg_557_pp0_iter1_reg = ap_const_lv1_0))) then 
                sum1_reg_223 <= grp_fu_256_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum1_reg_223 <= d_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_reg_557 = ap_const_lv1_0))) then
                A_load_reg_601 <= A_q0;
                tmp_31_reg_606 <= tmp_31_fu_411_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_503 <= grp_fu_293_p2;
                tmp_69_reg_493 <= tmp_69_fu_299_p1;
                tmp_70_reg_498 <= tmp_70_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_flatten_fu_305_p2 = ap_const_lv1_0))) then
                exitcond1_reg_516 <= exitcond1_fu_316_p2;
                j_cast_mid2_v_reg_521 <= j_cast_mid2_v_fu_327_p3;
                tmp_71_reg_527 <= tmp_71_fu_336_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_557 <= exitcond_fu_351_p2;
                exitcond_reg_557_pp0_iter1_reg <= exitcond_reg_557;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_mid2_reg_537 <= i_mid2_fu_340_p3;
                inneridx_reg_547 <= inneridx_fu_444_p2;
                outrowidx_reg_542 <= outrowidx_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvar_flatten_next_reg_511 <= indvar_flatten_next_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k_2_reg_561 <= k_2_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_351_p2 = ap_const_lv1_0))) then
                next_mul_reg_571 <= next_mul_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_reg_557 = ap_const_lv1_0))) then
                tmp_11_reg_611 <= grp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_351_p2 = ap_const_lv1_0))) then
                tmp_74_reg_576 <= tmp_74_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_470 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond3_fu_276_p2, ap_CS_fsm_state5, exitcond_flatten_fu_305_p2, exitcond_fu_351_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_276_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_flatten_fu_305_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_351_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= sum7_cast_fu_371_p1(15 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= newIndex_cast_fu_400_p1(13 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= newIndex_cast_fu_400_p1(13 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= newIndex_cast_fu_400_p1(13 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= newIndex_cast_fu_400_p1(13 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17, p_cast_fu_271_p1, sum4_cast_fu_429_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_address0 <= sum4_cast_fu_429_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= p_cast_fu_271_p1(15 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(sum1_reg_223, ap_CS_fsm_state3, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_d0 <= sum1_reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_276_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_276_p2 = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(exitcond_fu_351_p2)
    begin
        if ((exitcond_fu_351_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond_flatten_fu_305_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_flatten_fu_305_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_238_p4_assign_proc : process(k_reg_234, exitcond_reg_557, ap_CS_fsm_pp0_stage0, k_2_reg_561, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_557 = ap_const_lv1_0))) then 
            ap_phi_mux_k_phi_fu_238_p4 <= k_2_reg_561;
        else 
            ap_phi_mux_k_phi_fu_238_p4 <= k_reg_234;
        end if; 
    end process;


    ap_phi_mux_phi_mul_phi_fu_249_p4_assign_proc : process(phi_mul_reg_245, exitcond_reg_557, ap_CS_fsm_pp0_stage0, next_mul_reg_571, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_557 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_mul_phi_fu_249_p4 <= next_mul_reg_571;
        else 
            ap_phi_mux_phi_mul_phi_fu_249_p4 <= phi_mul_reg_245;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_fu_305_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_flatten_fu_305_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cast2_fu_290_p0 <= outrows;
    cast_fu_287_p0 <= outcols;
    d_address0 <= j_cast_mid2_v_fu_327_p3(15 - 1 downto 0);

    d_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_ce0 <= ap_const_logic_1;
        else 
            d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_316_p1 <= outrows;
    exitcond1_fu_316_p2 <= "1" when (i_reg_211 = exitcond1_fu_316_p1) else "0";
    exitcond3_fu_276_p2 <= "1" when (p_cast_fu_271_p1 = tmp_reg_470) else "0";
    exitcond_flatten_fu_305_p2 <= "1" when (indvar_flatten_reg_189 = bound_reg_503) else "0";
    exitcond_fu_351_p2 <= "1" when (ap_phi_mux_k_phi_fu_238_p4 = innerdim) else "0";
    grp_fu_293_p0 <= grp_fu_293_p00(64 - 1 downto 0);
    grp_fu_293_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast2_fu_290_p0),128));
    grp_fu_293_p1 <= grp_fu_293_p10(64 - 1 downto 0);
    grp_fu_293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_287_p0),128));
    i_53_fu_434_p2 <= std_logic_vector(unsigned(i_mid2_reg_537) + unsigned(ap_const_lv64_1));
    i_mid2_fu_340_p3 <= 
        ap_const_lv64_0 when (exitcond1_reg_516(0) = '1') else 
        i_reg_211;
    indvar_flatten_next_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_189) + unsigned(ap_const_lv128_lc_2));
    j_cast_mid2_v_fu_327_p3 <= 
        j_s_fu_321_p2 when (exitcond1_fu_316_p2(0) = '1') else 
        j_reg_200;
    j_s_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_reg_200));
    k_2_fu_356_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_238_p4) + unsigned(ap_const_lv64_1));
    newIndex_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_390_p4),64));
    newIndex_fu_390_p4 <= sum2_fu_381_p2(15 downto 2);
    next_mul_fu_376_p0 <= outcols;
    next_mul_fu_376_p2 <= std_logic_vector(signed(next_mul_fu_376_p0) + signed(ap_phi_mux_phi_mul_phi_fu_249_p4));
    p_1_fu_281_p2 <= std_logic_vector(unsigned(p_reg_178) + unsigned(ap_const_lv15_1));
    p_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_178),64));
    sum2_fu_381_p2 <= std_logic_vector(unsigned(j_cast_mid2_v_reg_521) + unsigned(ap_phi_mux_phi_mul_phi_fu_249_p4));
    sum4_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_425_p2),64));
    sum4_fu_425_p2 <= std_logic_vector(signed(outrowidx_reg_542) + signed(tmp_71_reg_527));
    sum7_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_366_p2),64));
    sum7_fu_366_p2 <= std_logic_vector(signed(inneridx_reg_547) + signed(tmp_73_fu_362_p1));
    tmp_31_fu_411_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_576),64));
    tmp_69_fu_299_p0 <= outcols;
    tmp_69_fu_299_p1 <= tmp_69_fu_299_p0(16 - 1 downto 0);
    tmp_70_fu_302_p1 <= innerdim(16 - 1 downto 0);
    tmp_71_fu_336_p1 <= j_cast_mid2_v_fu_327_p3(16 - 1 downto 0);
    tmp_72_fu_347_p1 <= i_mid2_fu_340_p3(16 - 1 downto 0);
    tmp_73_fu_362_p1 <= ap_phi_mux_k_phi_fu_238_p4(16 - 1 downto 0);
    tmp_74_fu_386_p1 <= sum2_fu_381_p2(2 - 1 downto 0);
end behav;
