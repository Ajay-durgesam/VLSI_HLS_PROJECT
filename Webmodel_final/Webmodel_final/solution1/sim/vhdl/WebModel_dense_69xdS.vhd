-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity WebModel_dense_69xdS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of WebModel_dense_69xdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110110100011010001011010110", 
    1 => "10111111010000010010001100101111", 
    2 => "10111110100011011100111011010001", 
    3 => "10111110111100001110110001011111", 
    4 => "10111110110110001110111110010110", 
    5 => "10111110101011000011001111011111", 
    6 => "10111100001011000000001010101011", 
    7 => "10111110110010000011011010111000", 
    8 => "10111101100010011100011110111000", 
    9 => "10111110110010111101100100011100", 
    10 => "10111111000101010011000011010100", 
    11 => "10111110110011100101101000100000", 
    12 => "10111110011011000111001100010101", 
    13 => "10111110100101101010011101001000", 
    14 => "10111110110010110000000011001001", 
    15 => "10111110101011101110101001010110", 
    16 => "10111110110000101010011011101101", 
    17 => "10111110011111010110101000011111", 
    18 => "10111100000000011110010001010001", 
    19 => "00111101000000111111100001110000", 
    20 => "10111111000111001001000010011001", 
    21 => "10111111000010101110100101101100", 
    22 => "10111110110101111001000000011100", 
    23 => "00111110000101111110101011101111", 
    24 => "00111011110011101001100011010000", 
    25 => "10111110111011000001100000110110", 
    26 => "10111110111000110110100100010011", 
    27 => "10111110001111011110010101111110", 
    28 => "00111101110100100111000011100001", 
    29 => "10111111000000000000001111100100", 
    30 => "10111110101110111010101010001111", 
    31 => "00111110000011000110001110010010", 
    32 => "10111101111111110111010011010010", 
    33 => "10111110100110111001001011101000", 
    34 => "10111110100100100011000111111110", 
    35 => "00111110000100100010100110001111", 
    36 => "10111110000011001001010011001011", 
    37 => "10111101111100001111001001111101", 
    38 => "10111111000011000010010011000111", 
    39 => "10111111001001100101001011010111", 
    40 => "10111110100011110100110001111001", 
    41 => "10111110011111001100001010000000", 
    42 => "10111110101010000101110011101001", 
    43 => "10111111010000011110000100100000", 
    44 => "10111110100011000101001100101010", 
    45 => "10111110100111110101001001011101", 
    46 => "10111101001000110101010011001110", 
    47 => "10111110101100111100010100000010", 
    48 => "10111111000110101010001010110100", 
    49 => "10111110100010100001011001000000", 
    50 => "10111110100001001010010101100010", 
    51 => "10111110111100101001111111011010", 
    52 => "10111110110101010001011100001110", 
    53 => "10111110010111101001000100110010", 
    54 => "10111110100110111111100110011000", 
    55 => "10111100111110100010100101101001", 
    56 => "10111110100011101101110010100000", 
    57 => "10111110010001001001011111010110", 
    58 => "10111110010111011100011011010111", 
    59 => "10111110101010101111110111100101", 
    60 => "00111101101111000101101001111001", 
    61 => "10111110001001101000001100001110", 
    62 => "10111110100000001010011100111010", 
    63 => "10111110001110011111011011000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity WebModel_dense_69xdS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of WebModel_dense_69xdS is
    component WebModel_dense_69xdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    WebModel_dense_69xdS_rom_U :  component WebModel_dense_69xdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


