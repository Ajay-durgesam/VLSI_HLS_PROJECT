-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_matmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    outcols : IN STD_LOGIC_VECTOR (63 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_matmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_203 : STD_LOGIC_VECTOR (127 downto 0);
    signal outrowidx_1_reg_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal inneridx_1_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_529 : STD_LOGIC_VECTOR (63 downto 0);
    signal a10_fu_269_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_24_fu_279_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_reg_543 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_22_fu_282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_reg_553 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_285_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_reg_559 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast_fu_293_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal cast_reg_569 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvars_iv_fu_296_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_574 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_1_fu_306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_reg_582 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_587 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_reg_592 : STD_LOGIC_VECTOR (13 downto 0);
    signal inneridx_2_fu_336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inneridx_2_reg_597 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrowidx_2_fu_341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrowidx_2_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal inner_k_outcols_4_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inner_k_outcols_4_reg_612 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal inner_k_outcols_4_ca_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inner_k_outcols_4_ca_reg_619 : STD_LOGIC_VECTOR (15 downto 0);
    signal inner_k_outcols_end_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inner_k_outcols_end_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_629 : STD_LOGIC_VECTOR (127 downto 0);
    signal exitcond_flatten_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_634_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_378_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_reg_638 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j1_mid2_fu_389_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_mid2_reg_643 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_mid2_v_v_v_s_fu_401_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_mid2_v_v_v_s_reg_648 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_mid2_v_fu_418_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_cast_mid2_v_reg_653 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_mid2_v_v_v_fu_428_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_mid2_v_v_v_reg_658 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_mid2_v_fu_440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_mid2_v_reg_663 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum3_fu_453_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum3_reg_673 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal C_addr_2_reg_688 : STD_LOGIC_VECTOR (14 downto 0);
    signal C_addr_2_reg_688_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal B_load_2_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state10_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal B_load_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state13_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal j_1_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvars_iv_next7_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal indvars_iv_next9_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal a_reg_114 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvars_iv11_pn_reg_125 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv8_reg_136 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv6_reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal inner_k_outcols_reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrowidx_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal inneridx_reg_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_207_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_outrowidx_1_phi_fu_217_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_inneridx_1_phi_fu_227_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j1_phi_fu_237_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_cast_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_mid2_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sum3_cast_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_22_fu_282_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_285_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_288_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast_fu_293_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax_fu_318_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inner_k_outcols_4_fu_358_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal inner_k_outcols_end_fu_368_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_396_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_396_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_409_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_cast_mid2_v_v_fu_413_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_423_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_mid2_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum2_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvars_iv_next7_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next9_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_349_p00 : STD_LOGIC_VECTOR (127 downto 0);

    component WebModel_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_mul_64s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WebModel_mul_64nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    WebModel_fadd_32ncud_U81 : component WebModel_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_q0,
        din1 => tmp_4_reg_703,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    WebModel_fmul_32ndEe_U82 : component WebModel_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_load_2_reg_693,
        din1 => B_load_reg_698,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    WebModel_mul_64s_bkb_U83 : component WebModel_mul_64s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols,
        din1 => outrows,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    WebModel_mul_64s_bkb_U84 : component WebModel_mul_64s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outrows,
        din1 => innerdim,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    WebModel_mul_64nseOg_U85 : component WebModel_mul_64nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_reg_114 <= a10_fu_269_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                a_reg_114 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
                indvar_flatten_reg_203 <= indvar_flatten_next_reg_638;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_203 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    indvars_iv11_pn_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvars_iv11_pn_reg_125 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvars_iv11_pn_reg_125 <= indvars_iv_reg_574;
            end if; 
        end if;
    end process;

    indvars_iv6_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvars_iv6_reg_146 <= outcols;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvars_iv6_reg_146 <= indvars_iv_next7_fu_485_p2;
            end if; 
        end if;
    end process;

    indvars_iv8_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvars_iv8_reg_136 <= tmp_25_fu_288_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvars_iv8_reg_136 <= indvars_iv_next9_fu_490_p2;
            end if; 
        end if;
    end process;

    inner_k_outcols_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                inner_k_outcols_reg_156 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                inner_k_outcols_reg_156 <= inner_k_outcols_4_reg_612;
            end if; 
        end if;
    end process;

    inneridx_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
                inneridx_1_reg_224 <= sum_cast_mid2_v_v_v_s_reg_648;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                inneridx_1_reg_224 <= inneridx_reg_180;
            end if; 
        end if;
    end process;

    inneridx_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                inneridx_reg_180 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                inneridx_reg_180 <= inneridx_2_reg_597;
            end if; 
        end if;
    end process;

    j1_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
                j1_reg_234 <= j_1_reg_708;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j1_reg_234 <= inner_k_outcols_4_fu_358_p2;
            end if; 
        end if;
    end process;

    k_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_reg_192 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                k_reg_192 <= k_1_reg_582;
            end if; 
        end if;
    end process;

    outrowidx_1_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
                outrowidx_1_reg_214 <= tmp_5_mid2_v_v_v_reg_658;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                outrowidx_1_reg_214 <= outrowidx_reg_168;
            end if; 
        end if;
    end process;

    outrowidx_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                outrowidx_reg_168 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                outrowidx_reg_168 <= outrowidx_2_reg_602;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then
                B_load_2_reg_693 <= B_q0;
                B_load_reg_698 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then
                C_addr_2_reg_688 <= sum2_cast_fu_475_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                C_addr_2_reg_688_pp0_iter1_reg <= C_addr_2_reg_688;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                bound_reg_629 <= grp_fu_349_p2;
                inner_k_outcols_4_ca_reg_619 <= inner_k_outcols_4_ca_fu_363_p2;
                inner_k_outcols_4_reg_612 <= inner_k_outcols_4_fu_358_p2;
                inner_k_outcols_end_reg_624 <= inner_k_outcols_end_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    cast_reg_569(63 downto 0) <= cast_fu_293_p1(63 downto 0);
                tmp_22_reg_553 <= tmp_22_fu_282_p1;
                tmp_23_reg_559 <= tmp_23_fu_285_p1;
                tmp_9_reg_548 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_634 <= exitcond_flatten_fu_373_p2;
                exitcond_flatten_reg_634_pp0_iter1_reg <= exitcond_flatten_reg_634;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_638 <= indvar_flatten_next_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvars_iv_reg_574 <= indvars_iv_fu_296_p2;
                k_1_reg_582 <= k_1_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_301_p2 = ap_const_lv1_0))) then
                inneridx_2_reg_597 <= inneridx_2_fu_336_p2;
                outrowidx_2_reg_602 <= outrowidx_2_fu_341_p2;
                tmp_26_reg_592 <= tmp_26_fu_332_p1;
                tmp_6_reg_587 <= tmp_6_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_373_p2 = ap_const_lv1_0))) then
                j1_mid2_reg_643 <= j1_mid2_fu_389_p3;
                sum3_reg_673 <= sum3_fu_453_p2;
                sum_cast_mid2_v_reg_653 <= sum_cast_mid2_v_fu_418_p2;
                tmp_30_reg_668 <= tmp_30_fu_445_p1;
                tmp_5_mid2_v_reg_663 <= tmp_5_mid2_v_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then
                j_1_reg_708 <= j_1_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_373_p2 = ap_const_lv1_0))) then
                sum_cast_mid2_v_v_v_s_reg_648 <= sum_cast_mid2_v_v_v_s_fu_401_p3;
                tmp_5_mid2_v_v_v_reg_658 <= tmp_5_mid2_v_v_v_fu_428_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_24_reg_543 <= tmp_24_fu_279_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then
                tmp_4_reg_703 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_529 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    cast_reg_569(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond2_fu_264_p2, ap_CS_fsm_state5, exitcond1_fu_301_p2, exitcond_flatten_fu_373_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage4_subdone, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_373_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_373_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    B_address0 <= sum_cast_mid2_fu_458_p1(13 - 1 downto 0);
    B_address1 <= sum3_cast_fu_466_p1(13 - 1 downto 0);

    B_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, C_addr_2_reg_688, C_addr_2_reg_688_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, a_cast_fu_259_p1, ap_block_pp0_stage5, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_address0 <= C_addr_2_reg_688_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            C_address0 <= C_addr_2_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= a_cast_fu_259_p1(15 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, grp_fu_243_p2, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_d0 <= grp_fu_243_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_264_p2, exitcond_flatten_reg_634_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((exitcond2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_634_pp0_iter1_reg = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a10_fu_269_p2 <= std_logic_vector(unsigned(a_reg_114) + unsigned(ap_const_lv15_1));
    a_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_114),64));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond_flatten_fu_373_p2)
    begin
        if ((exitcond_flatten_fu_373_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_301_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond1_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_207_p4_assign_proc : process(indvar_flatten_reg_203, exitcond_flatten_reg_634, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_638, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_207_p4 <= indvar_flatten_next_reg_638;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_207_p4 <= indvar_flatten_reg_203;
        end if; 
    end process;


    ap_phi_mux_inneridx_1_phi_fu_227_p4_assign_proc : process(inneridx_1_reg_224, exitcond_flatten_reg_634, ap_CS_fsm_pp0_stage0, sum_cast_mid2_v_v_v_s_reg_648, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
            ap_phi_mux_inneridx_1_phi_fu_227_p4 <= sum_cast_mid2_v_v_v_s_reg_648;
        else 
            ap_phi_mux_inneridx_1_phi_fu_227_p4 <= inneridx_1_reg_224;
        end if; 
    end process;


    ap_phi_mux_j1_phi_fu_237_p4_assign_proc : process(j1_reg_234, exitcond_flatten_reg_634, ap_CS_fsm_pp0_stage0, j_1_reg_708, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
            ap_phi_mux_j1_phi_fu_237_p4 <= j_1_reg_708;
        else 
            ap_phi_mux_j1_phi_fu_237_p4 <= j1_reg_234;
        end if; 
    end process;


    ap_phi_mux_outrowidx_1_phi_fu_217_p4_assign_proc : process(outrowidx_1_reg_214, exitcond_flatten_reg_634, ap_CS_fsm_pp0_stage0, tmp_5_mid2_v_v_v_reg_658, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_634 = ap_const_lv1_0))) then 
            ap_phi_mux_outrowidx_1_phi_fu_217_p4 <= tmp_5_mid2_v_v_v_reg_658;
        else 
            ap_phi_mux_outrowidx_1_phi_fu_217_p4 <= outrowidx_1_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_301_p2)
    begin
        if (((exitcond1_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cast_fu_293_p0 <= outrows;
    cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_293_p0),128));
    exitcond1_fu_301_p1 <= innerdim;
    exitcond1_fu_301_p2 <= "1" when (k_reg_192 = exitcond1_fu_301_p1) else "0";
    exitcond2_fu_264_p2 <= "1" when (a_cast_fu_259_p1 = tmp_reg_529) else "0";
    exitcond_flatten_fu_373_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_207_p4 = bound_reg_629) else "0";
    grp_fu_349_p0 <= grp_fu_349_p00(64 - 1 downto 0);
    grp_fu_349_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_587),128));
    grp_fu_349_p1 <= cast_reg_569(64 - 1 downto 0);
    indvar_flatten_next_fu_378_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_207_p4) + unsigned(ap_const_lv128_lc_2));
    indvars_iv_fu_296_p1 <= outcols;
    indvars_iv_fu_296_p2 <= std_logic_vector(unsigned(indvars_iv11_pn_reg_125) - unsigned(indvars_iv_fu_296_p1));
    indvars_iv_next7_fu_485_p1 <= outcols;
    indvars_iv_next7_fu_485_p2 <= std_logic_vector(unsigned(indvars_iv6_reg_146) + unsigned(indvars_iv_next7_fu_485_p1));
    indvars_iv_next9_fu_490_p1 <= outcols;
    indvars_iv_next9_fu_490_p2 <= std_logic_vector(unsigned(indvars_iv8_reg_136) + unsigned(indvars_iv_next9_fu_490_p1));
    inner_k_outcols_4_ca_fu_363_p2 <= std_logic_vector(unsigned(tmp_27_fu_354_p1) + unsigned(tmp_22_reg_553));
    inner_k_outcols_4_fu_358_p0 <= outcols;
    inner_k_outcols_4_fu_358_p2 <= std_logic_vector(signed(inner_k_outcols_4_fu_358_p0) + signed(inner_k_outcols_reg_156));
    inner_k_outcols_end_fu_368_p0 <= outcols;
    inner_k_outcols_end_fu_368_p2 <= std_logic_vector(signed(inner_k_outcols_end_fu_368_p0) + signed(inner_k_outcols_4_fu_358_p2));
    inneridx_2_fu_336_p2 <= std_logic_vector(unsigned(inneridx_reg_180) + unsigned(tmp_9_reg_548));
    j1_mid2_fu_389_p3 <= 
        ap_phi_mux_j1_phi_fu_237_p4 when (tmp_10_fu_384_p2(0) = '1') else 
        inner_k_outcols_4_reg_612;
    j_1_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j1_mid2_reg_643));
    k_1_fu_306_p2 <= std_logic_vector(unsigned(k_reg_192) + unsigned(ap_const_lv64_1));
    outrowidx_2_fu_341_p2 <= std_logic_vector(unsigned(outrowidx_reg_168) + unsigned(tmp_reg_529));
    sum2_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_470_p2),64));
    sum2_fu_470_p2 <= std_logic_vector(unsigned(tmp_5_mid2_fu_462_p2) + unsigned(tmp_30_reg_668));
    sum3_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_673),64));
    sum3_fu_453_p2 <= std_logic_vector(unsigned(tmp_31_fu_449_p1) + unsigned(tmp_24_reg_543));
    sum_cast_mid2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_cast_mid2_v_reg_653),64));
    sum_cast_mid2_v_fu_418_p2 <= std_logic_vector(unsigned(tmp_26_reg_592) + unsigned(sum_cast_mid2_v_v_fu_413_p2));
    sum_cast_mid2_v_v_fu_413_p2 <= std_logic_vector(unsigned(tmp_28_fu_409_p1) + unsigned(tmp_23_reg_559));
    sum_cast_mid2_v_v_v_s_fu_401_p3 <= 
        ap_phi_mux_inneridx_1_phi_fu_227_p4 when (tmp_10_fu_384_p2(0) = '1') else 
        tmp_11_fu_396_p2;
    tmp_10_fu_384_p2 <= "1" when (unsigned(ap_phi_mux_j1_phi_fu_237_p4) < unsigned(inner_k_outcols_end_reg_624)) else "0";
    tmp_11_fu_396_p0 <= innerdim;
    tmp_11_fu_396_p2 <= std_logic_vector(signed(tmp_11_fu_396_p0) + signed(ap_phi_mux_inneridx_1_phi_fu_227_p4));
    tmp_12_fu_423_p0 <= outcols;
    tmp_12_fu_423_p2 <= std_logic_vector(signed(tmp_12_fu_423_p0) + signed(ap_phi_mux_outrowidx_1_phi_fu_217_p4));
    tmp_22_fu_282_p0 <= outcols;
    tmp_22_fu_282_p1 <= tmp_22_fu_282_p0(16 - 1 downto 0);
    tmp_23_fu_285_p0 <= innerdim;
    tmp_23_fu_285_p1 <= tmp_23_fu_285_p0(14 - 1 downto 0);
    tmp_24_fu_279_p1 <= B_offset(14 - 1 downto 0);
    tmp_25_fu_288_p0 <= outcols;
    tmp_25_fu_288_p2 <= std_logic_vector(shift_left(unsigned(tmp_25_fu_288_p0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_26_fu_332_p1 <= k_reg_192(14 - 1 downto 0);
    tmp_27_fu_354_p1 <= inner_k_outcols_reg_156(16 - 1 downto 0);
    tmp_28_fu_409_p1 <= sum_cast_mid2_v_v_v_s_fu_401_p3(14 - 1 downto 0);
    tmp_29_fu_436_p1 <= tmp_5_mid2_v_v_v_fu_428_p3(16 - 1 downto 0);
    tmp_30_fu_445_p1 <= j1_mid2_fu_389_p3(16 - 1 downto 0);
    tmp_31_fu_449_p1 <= j1_mid2_fu_389_p3(14 - 1 downto 0);
    tmp_5_mid2_fu_462_p2 <= std_logic_vector(unsigned(tmp_5_mid2_v_reg_663) - unsigned(inner_k_outcols_4_ca_reg_619));
    tmp_5_mid2_v_fu_440_p2 <= std_logic_vector(unsigned(tmp_29_fu_436_p1) + unsigned(tmp_22_reg_553));
    tmp_5_mid2_v_v_v_fu_428_p3 <= 
        ap_phi_mux_outrowidx_1_phi_fu_217_p4 when (tmp_10_fu_384_p2(0) = '1') else 
        tmp_12_fu_423_p2;
    tmp_6_fu_326_p2 <= std_logic_vector(unsigned(indvars_iv_fu_296_p2) + unsigned(umax_fu_318_p3));
    tmp_s_fu_312_p2 <= "1" when (unsigned(indvars_iv6_reg_146) > unsigned(indvars_iv8_reg_136)) else "0";
    umax_fu_318_p3 <= 
        indvars_iv6_reg_146 when (tmp_s_fu_312_p2(0) = '1') else 
        indvars_iv8_reg_136;
end behav;
