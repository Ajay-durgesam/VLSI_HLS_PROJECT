-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity WebModel_dense_71UhA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of WebModel_dense_71UhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011010101000101100010010", 
    1 => "00111101010010010011001100100110", 
    2 => "10111110101001100101101111100111", 
    3 => "00111100100111101101110011000001", 
    4 => "10111110111010110110101101000110", 
    5 => "00111110101010000001010101010001", 
    6 => "00111101101011100010101110101000", 
    7 => "10111110110000100100010101100010", 
    8 => "10111110001100101011011010001101", 
    9 => "10111111001111000001101000001110", 
    10 => "10111111001000111111101010011101", 
    11 => "00111110011100011110001110100011", 
    12 => "10111110111111010010010101111011", 
    13 => "00111100000001010001110010011101", 
    14 => "10111111111101000101001110011000", 
    15 => "10111111000100111101111101111010", 
    16 => "00111101111011100001001000101010", 
    17 => "00111110011111101011110101100010", 
    18 => "00111110010101010111100000100101", 
    19 => "10111110111001011110000010001010", 
    20 => "00111111011100010100110010101100", 
    21 => "10111110110000000110100000010111", 
    22 => "10111111001000100100111101101110", 
    23 => "10111110110011101011101000010111", 
    24 => "00111101011111111010111110010100", 
    25 => "10111101111010000000100110101011", 
    26 => "10111110000010100111011100101111", 
    27 => "10111110100001010000111010001001", 
    28 => "10111111010001001001000101100110", 
    29 => "00111011000111000100000000010011", 
    30 => "10111100001000001010011001111000", 
    31 => "00111101110100011011100110000000", 
    32 => "00111110101010010100010111011101", 
    33 => "00111110110101001010000001010010", 
    34 => "00111101100010010100111111001110", 
    35 => "10111110000110111001001110000111", 
    36 => "00111110001100011100100010001011", 
    37 => "10111110100011111100011010011010", 
    38 => "10111111000001101111000100011010", 
    39 => "10111110111100001111100010101010", 
    40 => "10111110011010011001000011110011", 
    41 => "10111111000110100110110101010110", 
    42 => "10111101101110000001011010001100", 
    43 => "10111111000101101011010001001100", 
    44 => "00111101100110100010010000000011", 
    45 => "10111110110101100010011000010100", 
    46 => "10111110101101000010001011101001", 
    47 => "00111101010010011101010000010010", 
    48 => "00111100000010111011011000011011", 
    49 => "00111101111001010100110000111111", 
    50 => "10111111011010100010011010111110", 
    51 => "10111111000100110100000111010001", 
    52 => "10111110111111001101100100100110", 
    53 => "00111110001001110010101101010011", 
    54 => "00111101011001000101101100100111", 
    55 => "10111100000001010000111110000110", 
    56 => "00111011101000100010001101011001", 
    57 => "00111111010101010011100101110011", 
    58 => "00111110100010011110100010100110", 
    59 => "10111110001101101101110111100001", 
    60 => "00111110000110111010100010110100", 
    61 => "10111110101111001111111110000000", 
    62 => "00111101000101000000111000100100", 
    63 => "00111110100000000100010001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity WebModel_dense_71UhA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of WebModel_dense_71UhA is
    component WebModel_dense_71UhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    WebModel_dense_71UhA_rom_U :  component WebModel_dense_71UhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


