-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_matmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    outcols : IN STD_LOGIC_VECTOR (63 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_matmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv192_lc_2 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten2_reg_131 : STD_LOGIC_VECTOR (191 downto 0);
    signal k_reg_143 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_reg_154 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal a10_fu_213_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_21_fu_219_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_reg_505 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_520 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_20_fu_234_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_reg_526 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_18_fu_249_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_reg_542 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_19_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal bound5_reg_553 : STD_LOGIC_VECTOR (191 downto 0);
    signal exitcond_mid_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_reg_563 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_438_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_reg_568 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_573_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid_fu_282_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_mid_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_296_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_reg_590 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_cast_mid2_fu_300_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_cast_mid2_reg_595 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_mid2_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid2_reg_601 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid2_fu_320_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_mid2_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_mid2_fu_334_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_mid2_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_342_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_reg_619 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_op_fu_346_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_op_reg_624 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_26_fu_357_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_reg_629 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_27_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_mid2_fu_365_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_mid2_reg_639 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_fu_371_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum3_fu_371_p2 : signal is "no";
    signal sum3_reg_644 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal outrowidx_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outrowidx_reg_659 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal indvar_flatten_next2_fu_395_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal indvar_flatten_next2_reg_664 : STD_LOGIC_VECTOR (191 downto 0);
    signal B_load_2_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal outrowidx_mid1_fu_461_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outrowidx_mid1_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state11_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal C_addr_2_reg_684 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state12_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal j_1_fu_427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_689 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_fu_432_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_reg_694 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal a_reg_120 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_indvar_flatten2_phi_fu_135_p4 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_phi_fu_147_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_158_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_i_phi_fu_169_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j_phi_fu_180_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_cast_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_mid2_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sum3_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal cast_fu_222_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast2_fu_225_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_249_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_252_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_mid_fu_255_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_s_fu_290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_260_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_352_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_445_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_451_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_cast_mid221_v_fu_375_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_cast_mid2_v_fu_380_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal outrowidx_mid_fu_401_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal outrowidx_mid2_fu_407_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum2_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_228_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_228_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_243_p00 : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_fu_243_p10 : STD_LOGIC_VECTOR (191 downto 0);

    component WebModel_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_mul_64s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WebModel_mul_64nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component WebModel_mul_128nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (191 downto 0) );
    end component;


    component WebModel_mac_mulaocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component WebModel_mac_mulapcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component WebModel_mul_mul_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    WebModel_fadd_32ncud_U77 : component WebModel_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_q0,
        din1 => tmp_3_reg_699,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    WebModel_fmul_32ndEe_U78 : component WebModel_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_load_2_reg_669,
        din1 => B_load_reg_674,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    WebModel_mul_64s_bkb_U79 : component WebModel_mul_64s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols,
        din1 => outrows,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    WebModel_mul_64nseOg_U80 : component WebModel_mul_64nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p2);

    WebModel_mul_128nfYi_U81 : component WebModel_mul_128nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 128,
        din1_WIDTH => 64,
        dout_WIDTH => 192)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    WebModel_mac_mulaocq_U82 : component WebModel_mac_mulaocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_438_p0,
        din1 => tmp_20_reg_526,
        din2 => tmp_22_fu_260_p1,
        dout => grp_fu_438_p3);

    WebModel_mac_mulaocq_U83 : component WebModel_mac_mulaocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => k_cast_mid2_reg_595,
        din1 => tmp_18_reg_542,
        din2 => tmp_21_reg_505,
        dout => grp_fu_445_p3);

    WebModel_mac_mulapcA_U84 : component WebModel_mac_mulapcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => tmp_26_reg_629,
        din1 => tmp_20_reg_526,
        din2 => k_cast_mid2_reg_595,
        dout => grp_fu_451_p3);

    WebModel_mul_mul_ibs_U85 : component WebModel_mul_mul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_24_reg_563,
        din1 => tmp_19_reg_547,
        dout => outrowidx_fu_457_p2);

    WebModel_mul_mul_ibs_U86 : component WebModel_mul_mul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_27_reg_634,
        din1 => tmp_19_reg_547,
        dout => outrowidx_mid1_fu_461_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_reg_120 <= a10_fu_213_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                a_reg_120 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_165 <= i_mid2_reg_639;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_165 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten2_reg_131 <= indvar_flatten_next2_reg_664;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten2_reg_131 <= ap_const_lv192_lc_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_154 <= indvar_flatten_next_reg_694;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_154 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    j_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_176 <= j_1_reg_689;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_176 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    k_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_143 <= k_mid2_reg_608;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_reg_143 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                B_load_2_reg_669 <= B_q0;
                B_load_reg_674 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                C_addr_2_reg_684 <= sum2_cast_fu_422_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound5_reg_553 <= grp_fu_243_p2;
                exitcond_mid_reg_558 <= exitcond_mid_fu_255_p2;
                tmp_18_reg_542 <= tmp_18_fu_249_p1;
                tmp_19_reg_547 <= tmp_19_fu_252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_520 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten2_reg_573 <= exitcond_flatten2_fu_272_p2;
                exitcond_flatten2_reg_573_pp0_iter1_reg <= exitcond_flatten2_reg_573;
                tmp_24_reg_563 <= tmp_24_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_fu_272_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_577 <= exitcond_flatten_fu_277_p2;
                exitcond_mid2_reg_601 <= exitcond_mid2_fu_313_p3;
                i_mid_reg_584 <= i_mid_fu_282_p3;
                indvar_flatten_op_reg_624 <= indvar_flatten_op_fu_346_p2;
                j_mid2_reg_613 <= j_mid2_fu_334_p3;
                k_cast_mid2_reg_595 <= k_cast_mid2_fu_300_p3;
                tmp_25_reg_590 <= tmp_25_fu_296_p1;
                tmp_29_reg_619 <= tmp_29_fu_342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                i_mid2_reg_639 <= i_mid2_fu_365_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next2_reg_664 <= indvar_flatten_next2_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                indvar_flatten_next_reg_694 <= indvar_flatten_next_fu_432_p3;
                j_1_reg_689 <= j_1_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_fu_272_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k_mid2_reg_608 <= k_mid2_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_mid2_reg_601 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                outrowidx_mid1_reg_679 <= outrowidx_mid1_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_mid2_reg_601 = ap_const_lv1_0) and (exitcond_flatten_reg_577 = ap_const_lv1_0))) then
                outrowidx_reg_659 <= outrowidx_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                sum3_reg_644 <= sum3_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_reg_568 <= grp_fu_438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_20_reg_526 <= tmp_20_fu_234_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_21_reg_505 <= tmp_21_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_mid2_reg_601 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then
                tmp_26_reg_629 <= tmp_26_fu_357_p1;
                tmp_27_reg_634 <= tmp_27_fu_361_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_699 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_492 <= grp_fu_197_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond3_fu_208_p2, ap_enable_reg_pp0_iter0, exitcond_flatten2_reg_573, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((exitcond_flatten2_reg_573 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((exitcond_flatten2_reg_573 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    B_address0 <= sum_cast_mid2_fu_386_p1(13 - 1 downto 0);
    B_address1 <= sum3_cast_fu_391_p1(13 - 1 downto 0);

    B_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, C_addr_2_reg_684, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, a_cast_fu_203_p1, ap_block_pp0_stage5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            C_address0 <= C_addr_2_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= a_cast_fu_203_p1(15 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage5, grp_fu_187_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            C_d0 <= grp_fu_187_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_208_p2, exitcond_flatten2_reg_573_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((exitcond3_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten2_reg_573_pp0_iter1_reg = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a10_fu_213_p2 <= std_logic_vector(unsigned(a_reg_120) + unsigned(ap_const_lv15_1));
    a_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_120),64));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond_flatten2_reg_573)
    begin
        if ((exitcond_flatten2_reg_573 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_169_p4_assign_proc : process(i_reg_165, ap_CS_fsm_pp0_stage0, exitcond_flatten2_reg_573, i_mid2_reg_639, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_169_p4 <= i_mid2_reg_639;
        else 
            ap_phi_mux_i_phi_fu_169_p4 <= i_reg_165;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_135_p4_assign_proc : process(indvar_flatten2_reg_131, ap_CS_fsm_pp0_stage0, exitcond_flatten2_reg_573, indvar_flatten_next2_reg_664, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten2_phi_fu_135_p4 <= indvar_flatten_next2_reg_664;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_135_p4 <= indvar_flatten2_reg_131;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_158_p4_assign_proc : process(indvar_flatten_reg_154, ap_CS_fsm_pp0_stage0, exitcond_flatten2_reg_573, indvar_flatten_next_reg_694, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_158_p4 <= indvar_flatten_next_reg_694;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_158_p4 <= indvar_flatten_reg_154;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_180_p4_assign_proc : process(j_reg_176, ap_CS_fsm_pp0_stage0, exitcond_flatten2_reg_573, j_1_reg_689, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then 
            ap_phi_mux_j_phi_fu_180_p4 <= j_1_reg_689;
        else 
            ap_phi_mux_j_phi_fu_180_p4 <= j_reg_176;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_147_p4_assign_proc : process(k_reg_143, ap_CS_fsm_pp0_stage0, exitcond_flatten2_reg_573, k_mid2_reg_608, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten2_reg_573 = ap_const_lv1_0))) then 
            ap_phi_mux_k_phi_fu_147_p4 <= k_mid2_reg_608;
        else 
            ap_phi_mux_k_phi_fu_147_p4 <= k_reg_143;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cast2_fu_225_p0 <= outcols;
    cast_fu_222_p0 <= outrows;
    exitcond3_fu_208_p2 <= "1" when (a_cast_fu_203_p1 = tmp_reg_492) else "0";
    exitcond_flatten2_fu_272_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_135_p4 = bound5_reg_553) else "0";
    exitcond_flatten_fu_277_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_158_p4 = bound_reg_520) else "0";
    exitcond_fu_308_p1 <= outcols;
    exitcond_fu_308_p2 <= "1" when (ap_phi_mux_j_phi_fu_180_p4 = exitcond_fu_308_p1) else "0";
    exitcond_mid2_fu_313_p3 <= 
        exitcond_mid_reg_558 when (exitcond_flatten_fu_277_p2(0) = '1') else 
        exitcond_fu_308_p2;
    exitcond_mid_fu_255_p0 <= outcols;
    exitcond_mid_fu_255_p2 <= "1" when (exitcond_mid_fu_255_p0 = ap_const_lv64_0) else "0";
    grp_fu_228_p0 <= grp_fu_228_p00(64 - 1 downto 0);
    grp_fu_228_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast2_fu_225_p0),128));
    grp_fu_228_p1 <= grp_fu_228_p10(64 - 1 downto 0);
    grp_fu_228_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_222_p0),128));
    grp_fu_243_p0 <= grp_fu_243_p00(128 - 1 downto 0);
    grp_fu_243_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_reg_520),192));
    grp_fu_243_p1 <= grp_fu_243_p10(64 - 1 downto 0);
    grp_fu_243_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(innerdim),192));
    grp_fu_438_p0 <= ap_phi_mux_i_phi_fu_169_p4(14 - 1 downto 0);
    i_4_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_mid_reg_584));
    i_mid2_fu_365_p3 <= 
        i_4_fu_352_p2 when (exitcond_mid2_reg_601(0) = '1') else 
        i_mid_reg_584;
    i_mid_fu_282_p3 <= 
        ap_const_lv64_0 when (exitcond_flatten_fu_277_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_169_p4;
    indvar_flatten_next2_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv192_lc_2) + unsigned(indvar_flatten2_reg_131));
    indvar_flatten_next_fu_432_p3 <= 
        ap_const_lv128_lc_2 when (exitcond_flatten_reg_577(0) = '1') else 
        indvar_flatten_op_reg_624;
    indvar_flatten_op_fu_346_p2 <= std_logic_vector(unsigned(ap_const_lv128_lc_2) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_158_p4));
    j_1_fu_427_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_mid2_reg_613));
    j_mid2_fu_334_p3 <= 
        ap_const_lv64_0 when (tmp_6_fu_328_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_180_p4;
    k_cast_mid2_fu_300_p3 <= 
        tmp_25_fu_296_p1 when (exitcond_flatten_fu_277_p2(0) = '1') else 
        tmp_22_fu_260_p1;
    k_mid2_fu_320_p3 <= 
        k_s_fu_290_p2 when (exitcond_flatten_fu_277_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_147_p4;
    k_s_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(ap_phi_mux_k_phi_fu_147_p4));
    outrowidx_mid2_fu_407_p3 <= 
        outrowidx_mid1_reg_679 when (exitcond_mid2_reg_601(0) = '1') else 
        outrowidx_mid_fu_401_p3;
    outrowidx_mid_fu_401_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten_reg_577(0) = '1') else 
        outrowidx_reg_659;
    sum2_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_416_p2),64));
    sum2_fu_416_p2 <= std_logic_vector(unsigned(tmp_28_fu_413_p1) + unsigned(outrowidx_mid2_fu_407_p3));
    sum3_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_644),64));
    sum3_fu_371_p2 <= std_logic_vector(signed(grp_fu_445_p3) + signed(tmp_29_reg_619));
    sum_cast_mid221_v_fu_375_p3 <= 
        tmp_25_reg_590 when (exitcond_flatten_reg_577(0) = '1') else 
        sum_reg_568;
    sum_cast_mid2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_cast_mid2_v_fu_380_p3),64));
    sum_cast_mid2_v_fu_380_p3 <= 
        grp_fu_451_p3 when (exitcond_mid2_reg_601(0) = '1') else 
        sum_cast_mid221_v_fu_375_p3;
    tmp_18_fu_249_p0 <= outcols;
    tmp_18_fu_249_p1 <= tmp_18_fu_249_p0(14 - 1 downto 0);
    tmp_19_fu_252_p0 <= outcols;
    tmp_19_fu_252_p1 <= tmp_19_fu_252_p0(16 - 1 downto 0);
    tmp_20_fu_234_p1 <= innerdim(14 - 1 downto 0);
    tmp_21_fu_219_p1 <= B_offset(14 - 1 downto 0);
    tmp_22_fu_260_p1 <= ap_phi_mux_k_phi_fu_147_p4(14 - 1 downto 0);
    tmp_24_fu_268_p1 <= ap_phi_mux_i_phi_fu_169_p4(16 - 1 downto 0);
    tmp_25_fu_296_p1 <= k_s_fu_290_p2(14 - 1 downto 0);
    tmp_26_fu_357_p1 <= i_4_fu_352_p2(14 - 1 downto 0);
    tmp_27_fu_361_p1 <= i_4_fu_352_p2(16 - 1 downto 0);
    tmp_28_fu_413_p1 <= j_mid2_reg_613(16 - 1 downto 0);
    tmp_29_fu_342_p1 <= j_mid2_fu_334_p3(14 - 1 downto 0);
    tmp_6_fu_328_p2 <= (exitcond_mid2_fu_313_p3 or exitcond_flatten_fu_277_p2);
end behav;
