-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity WebModel_dense_70Aem_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of WebModel_dense_70Aem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100011001100101000011111011", 
    1 => "10111011011011000110100110001101", 
    2 => "00111110001100010010101110011110", 
    3 => "10111100010100100001010111101011", 
    4 => "00111110100111001111000100100001", 
    5 => "00111101001100010011011001001011", 
    6 => "10111101100111010011010111111010", 
    7 => "00111110100001011110101001000010", 
    8 => "00111110001110010000110111000101", 
    9 => "00111110101101011101110101101101", 
    10 => "00111110100111110010111100100001", 
    11 => "00111101000111000011111011010101", 
    12 => "00111110100111111010101001010000", 
    13 => "10111111001000011000000100101101", 
    14 => "10111110100101000110000101111001", 
    15 => "00111110100101111110010011111011", 
    16 => "10111100100011010001100100000111", 
    17 => "10111100110010100001101010010011", 
    18 => "00111101010001101110111100101000", 
    19 => "00111110100111000100110010111111", 
    20 => "10111110100000001000011000010110", 
    21 => "00111110100001110110111011111101", 
    22 => "00111110101011000101011100001100", 
    23 => "00111110100011101100000100010110", 
    24 => "10111101100110111111011100110001", 
    25 => "10111101001011110011000111100011", 
    26 => "10111101101100111011000011000101", 
    27 => "00111110010110101111010000001110", 
    28 => "10111110110111011001001010011111", 
    29 => "10111110101101001010001111000010", 
    30 => "10111110000111001111111011111000", 
    31 => "10111111000110011011100011100100", 
    32 => "10111100111110011001000010100101", 
    33 => "10111110000000111010100010010111", 
    34 => "10111101010111011110111010111110", 
    35 => "10111100110111001110110011100011", 
    36 => "10111101111110001010010010001110", 
    37 => "00111110011100011001111111111001", 
    38 => "00111110101010111101001010101111", 
    39 => "00111110100100111100100100101111", 
    40 => "00111110001010100001000001111000", 
    41 => "00111110100011110001011111000110", 
    42 => "00111101111011001001000011101010", 
    43 => "00111110100100111101000000001100", 
    44 => "10111101101011101010011100100111", 
    45 => "00111110100001101010001010101100", 
    46 => "00111110100010110110110010111110", 
    47 => "10111110110001111011001010100010", 
    48 => "10111110000000010110100101111111", 
    49 => "10111101001101111100000100011001", 
    50 => "00111101000111001101001111011011", 
    51 => "00111110011110101101111001000100", 
    52 => "10111110100000111110000010111110", 
    53 => "00111100101100110101010110001100", 
    54 => "10111110110111011101100101110010", 
    55 => "10111111001111100110011100101001", 
    56 => "10111110110000010001011110000010", 
    57 => "10111110011000101010001101110001", 
    58 => "00111011110101011011111000111001", 
    59 => "10111101011001011101010111101111", 
    60 => "00111100000100101000100110100101", 
    61 => "00111110001111100110101100111010", 
    62 => "10111111001011011000001111000110", 
    63 => "10111110111111011110101011000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity WebModel_dense_70Aem is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of WebModel_dense_70Aem is
    component WebModel_dense_70Aem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    WebModel_dense_70Aem_rom_U :  component WebModel_dense_70Aem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


