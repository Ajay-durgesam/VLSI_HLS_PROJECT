-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_array_ce0 : OUT STD_LOGIC;
    input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_shape_ce0 : OUT STD_LOGIC;
    input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    kernel_array_ce0 : OUT STD_LOGIC;
    kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce0 : OUT STD_LOGIC;
    kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    bias_array_ce0 : OUT STD_LOGIC;
    bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i3_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_addr_1_reg_510 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_25_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_array_load_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_52_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_52_reg_528 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_array_addr_2_reg_533 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_i5_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal outrows1_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrows1_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal outcols_reg_549 : STD_LOGIC_VECTOR (63 downto 0);
    signal innerdim_reg_560 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal outsize_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_k2c_affine_matmul_fu_244_ap_idle : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_ap_ready : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_ap_done : STD_LOGIC;
    signal i_fu_417_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_reg_573 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal output_array_addr_reg_578 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_i_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_k2c_dot_2_fu_219_ap_start : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_ap_done : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_C_array_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_dot_2_fu_219_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_2_fu_219_A_array_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_dot_2_fu_219_A_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_A_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_2_fu_219_A_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_B_array_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_dot_2_fu_219_B_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_219_B_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_2_fu_219_B_shape_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_ap_start : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_C_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_affine_matmul_fu_244_C_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_C_we0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_affine_matmul_fu_244_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_affine_matmul_fu_244_A_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_affine_matmul_fu_244_B_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_244_d_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_k2c_affine_matmul_fu_244_d_ce0 : STD_LOGIC;
    signal i_i1_reg_173 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_i_reg_185 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i4_reg_197 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_i_reg_208 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_k2c_dot_2_fu_219_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_affine_matmul_fu_244_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_cast_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i4_cast_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i_cast_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_309_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_56_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_20_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_to_int_i8_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_neg_i9_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_to_int_i_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_neg_i_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component k2c_dot_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_array_ce0 : OUT STD_LOGIC;
        A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_shape_ce0 : OUT STD_LOGIC;
        A_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_array_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_array_ce0 : OUT STD_LOGIC;
        B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_shape_ce0 : OUT STD_LOGIC;
        B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_affine_matmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        d_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        d_ce0 : OUT STD_LOGIC;
        d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outrows : IN STD_LOGIC_VECTOR (63 downto 0);
        outcols : IN STD_LOGIC_VECTOR (63 downto 0);
        innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WebModel_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_fdiv_32nqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_fexp_32nrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WebModel_mul_64s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_k2c_dot_2_fu_219 : component k2c_dot_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_2_fu_219_ap_start,
        ap_done => grp_k2c_dot_2_fu_219_ap_done,
        ap_idle => grp_k2c_dot_2_fu_219_ap_idle,
        ap_ready => grp_k2c_dot_2_fu_219_ap_ready,
        C_array_address0 => grp_k2c_dot_2_fu_219_C_array_address0,
        C_array_ce0 => grp_k2c_dot_2_fu_219_C_array_ce0,
        C_array_we0 => grp_k2c_dot_2_fu_219_C_array_we0,
        C_array_d0 => grp_k2c_dot_2_fu_219_C_array_d0,
        C_array_q0 => output_array_q0,
        A_array_address0 => grp_k2c_dot_2_fu_219_A_array_address0,
        A_array_ce0 => grp_k2c_dot_2_fu_219_A_array_ce0,
        A_array_q0 => input_array_q0,
        A_ndim_read => input_ndim_read,
        A_numel_read => input_numel_read,
        A_shape_address0 => grp_k2c_dot_2_fu_219_A_shape_address0,
        A_shape_ce0 => grp_k2c_dot_2_fu_219_A_shape_ce0,
        A_shape_q0 => input_shape_q0,
        B_array_address0 => grp_k2c_dot_2_fu_219_B_array_address0,
        B_array_ce0 => grp_k2c_dot_2_fu_219_B_array_ce0,
        B_array_q0 => kernel_array_q0,
        B_ndim_read => kernel_ndim_read,
        B_numel_read => kernel_numel_read,
        B_shape_address0 => grp_k2c_dot_2_fu_219_B_shape_address0,
        B_shape_ce0 => grp_k2c_dot_2_fu_219_B_shape_ce0,
        B_shape_q0 => kernel_shape_q0,
        p_read4 => tmp_6_reg_474);

    grp_k2c_affine_matmul_fu_244 : component k2c_affine_matmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_affine_matmul_fu_244_ap_start,
        ap_done => grp_k2c_affine_matmul_fu_244_ap_done,
        ap_idle => grp_k2c_affine_matmul_fu_244_ap_idle,
        ap_ready => grp_k2c_affine_matmul_fu_244_ap_ready,
        C_address0 => grp_k2c_affine_matmul_fu_244_C_address0,
        C_ce0 => grp_k2c_affine_matmul_fu_244_C_ce0,
        C_we0 => grp_k2c_affine_matmul_fu_244_C_we0,
        C_d0 => grp_k2c_affine_matmul_fu_244_C_d0,
        C_q0 => output_array_q0,
        A_address0 => grp_k2c_affine_matmul_fu_244_A_address0,
        A_ce0 => grp_k2c_affine_matmul_fu_244_A_ce0,
        A_q0 => input_array_q0,
        B_address0 => grp_k2c_affine_matmul_fu_244_B_address0,
        B_ce0 => grp_k2c_affine_matmul_fu_244_B_ce0,
        B_q0 => kernel_array_q0,
        d_address0 => grp_k2c_affine_matmul_fu_244_d_address0,
        d_ce0 => grp_k2c_affine_matmul_fu_244_d_ce0,
        d_q0 => bias_array_q0,
        outrows => outrows1_reg_543,
        outcols => outcols_reg_549,
        innerdim => innerdim_reg_560);

    WebModel_fadd_32ncud_U143 : component WebModel_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        din1 => grp_fu_260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p2);

    WebModel_fdiv_32nqcK_U144 : component WebModel_fdiv_32nqcK
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_280,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    WebModel_fexp_32nrcU_U145 : component WebModel_fexp_32nrcU
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    WebModel_mul_64s_bkb_U146 : component WebModel_mul_64s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols_reg_549,
        din1 => outrows1_reg_543,
        ce => grp_fu_403_ce,
        dout => grp_fu_403_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_affine_matmul_fu_244_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_affine_matmul_fu_244_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_k2c_affine_matmul_fu_244_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_affine_matmul_fu_244_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_affine_matmul_fu_244_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_2_fu_219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_2_fu_219_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_k2c_dot_2_fu_219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_2_fu_219_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_2_fu_219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i1_reg_173 <= i_25_fu_360_p2;
            elsif (((grp_k2c_dot_2_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i1_reg_173 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_i4_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i4_reg_197 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_i4_reg_197 <= i_52_reg_528;
            end if; 
        end if;
    end process;

    i_i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                i_i_reg_208 <= i_reg_573;
            elsif (((grp_k2c_affine_matmul_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_i_reg_208 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    j_i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_185 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_i_reg_185 <= j_reg_500;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bias_array_load_reg_520 <= bias_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_52_reg_528 <= i_52_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_470 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                i_reg_573 <= i_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_reg_479 <= icmp_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                innerdim_reg_560 <= kernel_shape_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_500 <= j_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                outcols_reg_549 <= kernel_shape_q0;
                outrows1_reg_543 <= outrows1_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_array_addr_1_reg_510 <= tmp_i_cast_fu_355_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                output_array_addr_2_reg_533 <= i_i4_cast_fu_365_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_412_p2 = ap_const_lv1_0) and (tmp_reg_470 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                output_array_addr_reg_578 <= i_i_cast_fu_407_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_affine_matmul_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                outsize_reg_565 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_275 <= output_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_280 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_286 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_291 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_6_reg_474 <= tmp_6_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_470 <= tmp_fu_296_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_296_p2, tmp_reg_470, ap_CS_fsm_state4, exitcond_i3_fu_334_p2, ap_CS_fsm_state12, exitcond_i5_fu_370_p2, ap_CS_fsm_state42, grp_k2c_affine_matmul_fu_244_ap_done, ap_CS_fsm_state43, exitcond_i_fu_412_p2, grp_k2c_dot_2_fu_219_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_i2_fu_325_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_2_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i2_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i3_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                if (((exitcond_i5_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_k2c_affine_matmul_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and ((exitcond_i_fu_412_p2 = ap_const_lv1_1) or (tmp_reg_470 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_470, ap_CS_fsm_state43, exitcond_i_fu_412_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and ((exitcond_i_fu_412_p2 = ap_const_lv1_1) or (tmp_reg_470 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_470, ap_CS_fsm_state43, exitcond_i_fu_412_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and ((exitcond_i_fu_412_p2 = ap_const_lv1_1) or (tmp_reg_470 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_array_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state42, grp_k2c_affine_matmul_fu_244_d_address0, j_i_reg_185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_address0 <= j_i_reg_185(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            bias_array_address0 <= grp_k2c_affine_matmul_fu_244_d_address0;
        else 
            bias_array_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state42, grp_k2c_affine_matmul_fu_244_d_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            bias_array_ce0 <= grp_k2c_affine_matmul_fu_244_d_ce0;
        else 
            bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i3_fu_334_p2 <= "1" when (j_i_reg_185 = bias_numel_read) else "0";
    exitcond_i5_fu_370_p2 <= "1" when (i_i4_cast_fu_365_p1 = output_numel_read) else "0";
    exitcond_i_fu_412_p2 <= "1" when (i_i_cast_fu_407_p1 = outsize_reg_565) else "0";

    grp_fu_260_p0_assign_proc : process(reg_275, reg_286, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_260_p0 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_260_p0 <= reg_275;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_260_p1_assign_proc : process(bias_array_load_reg_520, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_260_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_260_p1 <= bias_array_load_reg_520;
        else 
            grp_fu_260_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(tmp_i1_fu_391_p1, ap_CS_fsm_state14, tmp_i_fu_433_p1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_270_p1 <= tmp_i_fu_433_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_270_p1 <= tmp_i1_fu_391_p1;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_403_ce_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state42, grp_k2c_affine_matmul_fu_244_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_k2c_affine_matmul_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            grp_fu_403_ce <= ap_const_logic_1;
        else 
            grp_fu_403_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_k2c_affine_matmul_fu_244_ap_start <= grp_k2c_affine_matmul_fu_244_ap_start_reg;
    grp_k2c_dot_2_fu_219_ap_start <= grp_k2c_dot_2_fu_219_ap_start_reg;
    i_25_fu_360_p2 <= std_logic_vector(unsigned(i_i1_reg_173) + unsigned(bias_numel_read));
    i_52_fu_375_p2 <= std_logic_vector(unsigned(i_i4_reg_197) + unsigned(ap_const_lv15_1));
    i_fu_417_p2 <= std_logic_vector(unsigned(i_i_reg_208) + unsigned(ap_const_lv15_1));
    i_i4_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_197),64));
    i_i_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_208),64));
    icmp_fu_319_p2 <= "0" when (tmp_54_fu_309_p4 = ap_const_lv63_0) else "1";

    input_array_address0_assign_proc : process(ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_A_array_address0, grp_k2c_affine_matmul_fu_244_A_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            input_array_address0 <= grp_k2c_affine_matmul_fu_244_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_address0 <= grp_k2c_dot_2_fu_219_A_array_address0;
        else 
            input_array_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_array_ce0_assign_proc : process(ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_A_array_ce0, grp_k2c_affine_matmul_fu_244_A_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            input_array_ce0 <= grp_k2c_affine_matmul_fu_244_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_ce0 <= grp_k2c_dot_2_fu_219_A_array_ce0;
        else 
            input_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_296_p2, grp_k2c_dot_2_fu_219_A_shape_address0, ap_CS_fsm_state2)
    begin
        if (((tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_address0 <= grp_k2c_dot_2_fu_219_A_shape_address0;
        else 
            input_shape_address0 <= "XXX";
        end if; 
    end process;


    input_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_296_p2, grp_k2c_dot_2_fu_219_A_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_ce0 <= grp_k2c_dot_2_fu_219_A_shape_ce0;
        else 
            input_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_185));

    kernel_array_address0_assign_proc : process(ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_B_array_address0, grp_k2c_affine_matmul_fu_244_B_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            kernel_array_address0 <= grp_k2c_affine_matmul_fu_244_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_address0 <= grp_k2c_dot_2_fu_219_B_array_address0;
        else 
            kernel_array_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    kernel_array_ce0_assign_proc : process(ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_B_array_ce0, grp_k2c_affine_matmul_fu_244_B_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            kernel_array_ce0 <= grp_k2c_affine_matmul_fu_244_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_ce0 <= grp_k2c_dot_2_fu_219_B_array_ce0;
        else 
            kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_296_p2, ap_CS_fsm_state40, grp_k2c_dot_2_fu_219_B_shape_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            kernel_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            kernel_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_address0 <= grp_k2c_dot_2_fu_219_B_shape_address0;
        else 
            kernel_shape_address0 <= "XXX";
        end if; 
    end process;


    kernel_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_296_p2, ap_CS_fsm_state40, grp_k2c_dot_2_fu_219_B_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_start = ap_const_logic_1) and (tmp_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_ce0 <= grp_k2c_dot_2_fu_219_B_shape_ce0;
        else 
            kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_address0_assign_proc : process(ap_CS_fsm_state4, output_array_addr_1_reg_510, ap_CS_fsm_state12, output_array_addr_2_reg_533, ap_CS_fsm_state42, ap_CS_fsm_state43, output_array_addr_reg_578, grp_k2c_dot_2_fu_219_C_array_address0, grp_k2c_affine_matmul_fu_244_C_address0, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state70, tmp_i_cast_fu_355_p1, i_i4_cast_fu_365_p1, i_i_cast_fu_407_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            output_array_address0 <= output_array_addr_reg_578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_array_address0 <= i_i_cast_fu_407_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_array_address0 <= output_array_addr_2_reg_533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_array_address0 <= i_i4_cast_fu_365_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_array_address0 <= output_array_addr_1_reg_510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_array_address0 <= tmp_i_cast_fu_355_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_array_address0 <= grp_k2c_affine_matmul_fu_244_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_2_fu_219_C_array_address0;
        else 
            output_array_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state42, ap_CS_fsm_state43, grp_k2c_dot_2_fu_219_C_array_ce0, grp_k2c_affine_matmul_fu_244_C_ce0, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_array_ce0 <= grp_k2c_affine_matmul_fu_244_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_2_fu_219_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(reg_280, reg_291, ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_C_array_d0, grp_k2c_affine_matmul_fu_244_C_d0, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            output_array_d0 <= reg_291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_array_d0 <= reg_280;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_array_d0 <= grp_k2c_affine_matmul_fu_244_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_2_fu_219_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_we0_assign_proc : process(ap_CS_fsm_state42, grp_k2c_dot_2_fu_219_C_array_we0, grp_k2c_affine_matmul_fu_244_C_we0, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state39, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_array_we0 <= grp_k2c_affine_matmul_fu_244_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_2_fu_219_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outrows1_fu_396_p3 <= 
        input_shape_q0 when (icmp_reg_479(0) = '1') else 
        ap_const_lv64_1;
    tmp_54_fu_309_p4 <= input_ndim_read(63 downto 1);
    tmp_55_fu_330_p1 <= j_i_reg_185(16 - 1 downto 0);
    tmp_56_fu_345_p1 <= i_i1_reg_173(16 - 1 downto 0);
    tmp_6_fu_302_p2 <= std_logic_vector(unsigned(input_ndim_read) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_fu_296_p2 <= "1" when (unsigned(input_ndim_read) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i1_fu_391_p1 <= tmp_neg_i9_fu_385_p2;
    tmp_i2_fu_325_p2 <= "1" when (unsigned(i_i1_reg_173) < unsigned(output_numel_read)) else "0";
    tmp_i_20_fu_349_p2 <= std_logic_vector(unsigned(tmp_56_fu_345_p1) + unsigned(tmp_55_fu_330_p1));
    tmp_i_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_20_fu_349_p2),64));
    tmp_i_fu_433_p1 <= tmp_neg_i_fu_427_p2;
    tmp_neg_i9_fu_385_p2 <= (tmp_to_int_i8_fu_381_p1 xor ap_const_lv32_80000000);
    tmp_neg_i_fu_427_p2 <= (tmp_to_int_i_fu_423_p1 xor ap_const_lv32_80000000);
    tmp_to_int_i8_fu_381_p1 <= reg_275;
    tmp_to_int_i_fu_423_p1 <= reg_275;
end behav;
